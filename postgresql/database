--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.6
-- Dumped by pg_dump version 9.5.6

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: reading; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE reading AS (
	value numeric,
	ts timestamp with time zone
);


--
-- Name: meter_reading_scale(integer, integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION meter_reading_scale(base_meter integer, meter integer, ts timestamp with time zone) RETURNS numeric
    LANGUAGE plpgsql STABLE STRICT
    AS $$DECLARE
  base_prev reading;
  base_nearest reading;
  prev_value numeric;
  nearest_value numeric;
  scale numeric;
BEGIN
  base_nearest := next_reading(base_meter, ts);
  IF base_nearest.value IS NULL THEN
    base_nearest := prev_reading(base_meter, ts);
  END IF;
  IF base_nearest.value IS NULL THEN RAISE DEBUG 'No reading for base meter near %', ts; END IF;

  base_prev := prev_reading(base_meter, base_nearest.ts - '00:00:01'::interval);
  IF base_prev.value IS NULL THEN RAISE DEBUG 'No previous reading for base meter before %', ts; END IF;

  IF base_prev.value = base_nearest.value THEN
    base_prev.value := NULL;
    base_nearest.value := NULL;
    RAISE DEBUG 'Not enough readings for base meter';
  END IF;

  scale := 1;

  IF base_prev.value IS NOT NULL AND base_nearest.value IS NOT NULL THEN
    IF base_nearest.value < base_prev.value THEN base_nearest.value := base_nearest.value + meter_wrap_value(base_meter); END IF;

    RAISE DEBUG 'Base meter nearest: % at %', base_nearest.value, base_nearest.ts;
    RAISE DEBUG 'Base meter previous: % at %', base_prev.value, base_prev.ts;
    RAISE DEBUG 'Base meter usage: %', (base_nearest.value - base_prev.value);

    IF base_nearest.value < base_prev.value THEN RAISE NOTICE 'Unresolved wrap on base meter'; RETURN NULL; END IF;

    prev_value := meter_reading_value(meter, base_prev.ts);
    IF prev_value IS NULL THEN RAISE DEBUG 'No reading for meter at %', base_prev.ts; END IF;

    nearest_value := meter_reading_value(meter, base_nearest.ts);
    IF nearest_value IS NULL THEN RAISE DEBUG 'No reading for meter at %', base_nearest.ts; END IF;

    IF nearest_value < prev_value THEN nearest_value := nearest_value + meter_wrap_value(meter); END IF;

    RAISE DEBUG 'Meter nearest: %', nearest_value;
    RAISE DEBUG 'Meter previous: %', prev_value;
    RAISE DEBUG 'Meter usage: %', (nearest_value - prev_value);

    IF nearest_value < prev_value THEN RAISE NOTICE 'Unresolved wrap on meter'; RETURN NULL; END IF;

    IF nearest_value IS NOT NULL and prev_value IS NOT NULL THEN
      scale := (base_nearest.value - base_prev.value)/(nearest_value - prev_value);
    END IF;
  END IF;

  RAISE DEBUG 'Scale at %: %', ts, scale;

  RETURN scale;
END;$$;


--
-- Name: meter_reading_usage_rescale(integer, integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION meter_reading_usage_rescale(base_meter integer, meter integer, start_ts timestamp with time zone, stop_ts timestamp with time zone) RETURNS numeric
    LANGUAGE plpgsql STABLE STRICT
    AS $$DECLARE
  base_start_prev_ts timestamp with time zone;
  base_stop_prev_ts timestamp with time zone;
  start_scale numeric;
  stop_scale numeric;
  start_prev_value numeric;
  stop_prev_value numeric;
  start_value numeric;
  stop_value numeric;
BEGIN
  base_start_prev_ts = prev_reading_ts(base_meter, start_ts);
  base_stop_prev_ts = prev_reading_ts(base_meter, stop_ts);
  IF base_start_prev_ts IS NULL THEN RAISE NOTICE 'No previous reading before start for base meter'; RETURN 0; END IF;
  IF base_stop_prev_ts IS NULL THEN RAISE NOTICE 'No previous reading before stop for base meter'; RETURN 0; END IF;

  RAISE DEBUG 'Base meter start (previous): %', base_start_prev_ts;
  RAISE DEBUG 'Base meter stop (previous): %', base_stop_prev_ts;

  start_prev_value = meter_reading_value(meter, base_start_prev_ts);
  stop_prev_value = meter_reading_value(meter, base_stop_prev_ts);
  IF start_prev_value IS NULL AND stop_prev_value IS NULL THEN RAISE NOTICE 'No previous reading before start or stop for meter'; RETURN 0; END IF;

  start_value = meter_reading_value(meter, start_ts);
  IF start_value IS NULL THEN
    start_value := meter_reading_value(meter, next_reading_ts(meter, start_ts));
  END IF;
  stop_value = meter_reading_value(meter, stop_ts);

  IF start_value IS NULL THEN RAISE NOTICE 'No start reading for meter'; RETURN 0; END IF;
  IF stop_value IS NULL THEN RAISE NOTICE 'No stop reading for meter'; RETURN 0; END IF;

  IF start_prev_value IS NULL THEN start_prev_value := start_value; END IF;

  IF stop_prev_value < start_prev_value THEN stop_prev_value := stop_prev_value + meter_wrap_value(meter); END IF;
  IF start_value < start_prev_value THEN
    start_value := start_value + meter_wrap_value(meter);
    stop_value := stop_value + meter_wrap_value(meter);
  END IF;
  IF stop_value < stop_prev_value THEN
    start_value := start_value + meter_wrap_value(meter);
    stop_value := stop_value + meter_wrap_value(meter);
  END IF;
  IF stop_value < start_value THEN stop_value := stop_value + meter_wrap_value(meter); END IF;

  RAISE DEBUG 'Meter start (previous): %', start_prev_value;
  RAISE DEBUG 'Meter stop (previous): %', stop_prev_value;

  RAISE DEBUG 'Period start: %', start_value;
  RAISE DEBUG 'Period stop: %', stop_value;
  RAISE DEBUG 'Period usage: %', (stop_value - start_value);

  IF stop_prev_value < start_prev_value THEN RAISE NOTICE 'Unresolved wrap on meter % < %', stop_prev_value, start_prev_value; RETURN NULL; END IF;
  IF stop_value < start_value THEN RAISE NOTICE 'Unresolved wrap on meter % < %', stop_value, start_value; RETURN NULL; END IF;

  start_scale = meter_reading_scale(base_meter, meter, start_ts);
  stop_scale = meter_reading_scale(base_meter, meter, stop_ts);

  RAISE DEBUG 'Start scale: %', start_scale;
  RAISE DEBUG 'Stop scale: %', stop_scale;

  start_value := start_prev_value + (start_value - start_prev_value) * start_scale;
  stop_value := stop_prev_value + (stop_value - stop_prev_value) * stop_scale;

  RAISE DEBUG 'Period start: %', start_value;
  RAISE DEBUG 'Period stop: %', stop_value;
  RAISE DEBUG 'Period usage: %', (stop_value - start_value);

  RETURN (stop_value - start_value)::numeric(9, 3);
END;$$;


--
-- Name: meter_reading_value(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION meter_reading_value(meter integer, ts timestamp with time zone) RETURNS numeric
    LANGUAGE plpgsql STABLE STRICT
    AS $$DECLARE
prev_value numeric;
next_value numeric;
prev_ts timestamp with time zone;
next_ts timestamp with time zone;
BEGIN
prev_value := prev_reading_value(meter, ts);
IF prev_value IS NULL THEN RETURN NULL; END IF;

next_value := next_reading_value(meter, ts);
IF next_value IS NULL OR prev_value = next_value THEN RETURN prev_value; END IF;

IF next_value < prev_value THEN next_value := next_value + meter_wrap_value(meter); END IF;
IF next_value < prev_value THEN RETURN NULL; END IF;

prev_ts := prev_reading_ts(meter, ts);
next_ts := next_reading_ts(meter, ts);
RETURN (prev_value + (next_value - prev_value) * (date_part('epoch', (ts - prev_ts))/date_part('epoch', (next_ts - prev_ts))));
END;$$;


--
-- Name: meter_wrap_value(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION meter_wrap_value(meter integer) RETURNS numeric
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT 10^(major_digits)::numeric FROM meters WHERE id = $1;$_$;


--
-- Name: next_reading(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION next_reading(meter integer, after timestamp with time zone) RETURNS reading
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT value, ts FROM readings_active WHERE meter = $1 and ts >= $2 ORDER BY ts LIMIT 1;$_$;


--
-- Name: next_reading_ts(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION next_reading_ts(meter integer, after timestamp with time zone) RETURNS timestamp with time zone
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT ts FROM readings_active WHERE meter = $1 AND ts >= $2 ORDER BY ts LIMIT 1;$_$;


--
-- Name: next_reading_value(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION next_reading_value(meter integer, after timestamp with time zone) RETURNS numeric
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT value FROM readings_active WHERE meter = $1 and ts >= $2 ORDER BY ts LIMIT 1;$_$;


--
-- Name: prev_reading(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION prev_reading(meter integer, before timestamp with time zone) RETURNS reading
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT value, ts FROM readings_active WHERE meter = $1 and ts <= $2 ORDER BY ts DESC LIMIT 1;$_$;


--
-- Name: prev_reading_ts(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION prev_reading_ts(meter integer, before timestamp with time zone) RETURNS timestamp with time zone
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT ts FROM readings_active WHERE meter = $1 AND ts <= $2 ORDER BY ts DESC LIMIT 1;$_$;


--
-- Name: prev_reading_value(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION prev_reading_value(meter integer, before timestamp with time zone) RETURNS numeric
    LANGUAGE sql STABLE STRICT
    AS $_$SELECT value FROM readings_active WHERE meter = $1 and ts <= $2 ORDER BY ts DESC LIMIT 1;$_$;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: meters; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE meters (
    id integer NOT NULL,
    name text NOT NULL,
    major_digits integer NOT NULL,
    minor_digits integer NOT NULL
);


--
-- Name: meters_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE meters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: meters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE meters_id_seq OWNED BY meters.id;


--
-- Name: readings_active; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE readings_active (
    meter integer NOT NULL,
    ts timestamp with time zone DEFAULT now() NOT NULL,
    value numeric(9,3) NOT NULL
);


--
-- Name: readings_reactive; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE readings_reactive (
    meter integer NOT NULL,
    ts timestamp with time zone DEFAULT now() NOT NULL,
    value numeric(9,3) NOT NULL
);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY meters ALTER COLUMN id SET DEFAULT nextval('meters_id_seq'::regclass);


--
-- Name: meters_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY meters
    ADD CONSTRAINT meters_name_key UNIQUE (name);


--
-- Name: meters_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY meters
    ADD CONSTRAINT meters_pkey PRIMARY KEY (id);


--
-- Name: readings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY readings_active
    ADD CONSTRAINT readings_pkey PRIMARY KEY (meter, ts);


--
-- Name: readings_reactive_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY readings_reactive
    ADD CONSTRAINT readings_reactive_pkey PRIMARY KEY (meter, ts);


--
-- PostgreSQL database dump complete
--

